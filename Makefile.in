# Compiler and linker flags
CCFLAGS = -I./ -Iinclude -Isrc -Wall -Wextra -pedantic -std=c++17 -O3 -fPIC -Wno-sign-compare -DRAW
LDFLAGS = -shared
CXX = g++

PREFIX = @prefix@

# Target library
LIBNAME = libebml_ng

# Source files
SRCDIR = src
INCDIR = include

SRCFILES = libebml_ng/io/stdio.cpp \
    libebml_ng/io/fd.cpp \
    libebml_ng/repr.cpp \
    libebml_ng/io.cpp \
    libebml_ng/exceptions.cpp \
    libebml_ng/elementcls.cpp \
    libebml_ng/element.cpp \
    libebml_ng/void.cpp \
    libebml_ng/schema.cpp \
    libebml_ng/document.cpp \
    libebml_ng/struct.cpp \
    libebml_ng/masterelement/base.cpp \
    libebml_ng/masterelement/base/childmgmt.cpp \
    libebml_ng/masterelement/base/decoding.cpp \
    libebml_ng/masterelement/base/size.cpp \
    libebml_ng/masterelement/base/encoding.cpp \
    libebml_ng/masterelement/base/initialization.cpp \
    libebml_ng/masterelement/base/iteration.cpp \
    libebml_ng/masterelement/multislot.cpp \
    libebml_ng/masterelement/list.cpp \
    libebml_ng/masterelement/lazyload.cpp \
    libebml_ng/vint.cpp \
    libebml_ng/parsing/io.cpp \
    libebml_ng/parsing/string.cpp \
    libebml_ng/struct/ll.cpp \
    libebml_ng/struct/ull.cpp \
    libebml_ng/struct/double.cpp \
    libebml_ng/struct/binary.cpp \
    libebml_ng/struct/unicode.cpp \
    libebml_ng/struct/datetime.cpp \
    libebml_ng/basictypes.cpp \
    libebml_ng/head.cpp \
    libebml_ng/seekdata.cpp

# Build files
BUILDDIR = build
OBJFILES = $(patsubst %.cpp,%.o,$(SRCFILES))

LIBFILE = $(BUILDDIR)/$(LIBNAME).so

HEADERFILE = $(INCDIR)/$(LIBNAME).h
HEADERDIR = $(INCDIR)/$(LIBNAME)

# Top-level target to build the library
all: $(LIBFILE)

# Rule to build an object file
$(BUILDDIR)/%.o: $(SRCDIR)/%.cpp
	mkdir -p $(@D)
	$(CXX) $(CCFLAGS) -c $< -o $@

# Rule to build the library
$(LIBFILE): $(addprefix $(BUILDDIR)/,$(OBJFILES))
	$(CXX) $(LDFLAGS) -o $@ $^

# Install rule
install: $(LIBFILE)
	install -d $(DESTDIR)$(PREFIX)/lib
	install -m 755 $(LIBFILE) $(DESTDIR)$(PREFIX)/lib
	install -m 644 $(HEADERFILE) $(DESTDIR)$(PREFIX)/include
	install -d $(DESTDIR)$(PREFIX)/include/$(LIBNAME)
	cp -ru --no-target-directory $(HEADERDIR) $(DESTDIR)$(PREFIX)/include/$(LIBNAME)

# Clean rule
clean:
	rm -Rf $(BUILDDIR)/$(LIBNAME) $(BUILDDIR)/$(LIBNAME).o $(BUILDDIR)/$(LIBNAME).so

docs:
	doxygen -d Preprocessor Doxyfile
