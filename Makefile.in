# Compiler and linker flags
CXXFLAGS = @CXXFLAGS@ -I./ -Iinclude -Isrc -Wall -Wextra -pedantic -std=c++20 -fPIC -Wno-sign-compare -DRAW
LDFLAGS = -shared
CXX = @CXX@

PREFIX = @prefix@

# Target library
LIBNAME = libebml_ng

# Source files
SRCDIR = src
INCDIR = src

SRCFILES = libebml_ng/io/stdio.cpp \
    libebml_ng/io/fd.cpp \
    libebml_ng/repr.cpp \
    libebml_ng/io.cpp \
    libebml_ng/exceptions.cpp \
    libebml_ng/ebmlElementType.cpp \
    libebml_ng/ebmlElement.cpp \
    libebml_ng/struct.cpp \
    libebml_ng/ebmlVoid.cpp \
    libebml_ng/ebmlSchema.cpp \
    libebml_ng/ebmlDocument.cpp \
    libebml_ng/masterelement/base/ebmlMasterElementType.cpp \
    libebml_ng/masterelement/base/ebmlMasterElement.cpp \
    libebml_ng/masterelement/base/childTypeSpec.cpp \
    libebml_ng/masterelement/base/sizetree_t.cpp \
    libebml_ng/masterelement/base/childSlot_t.cpp \
    libebml_ng/masterelement/base/c_ebmlElement_l.cpp \
    libebml_ng/masterelement/ebmlMultiSlot.cpp \
    libebml_ng/masterelement/ebmlList.cpp \
    libebml_ng/masterelement/ebmlPair.cpp \
    libebml_ng/masterelement/lazyload/ebmlLazyLoad.cpp \
    libebml_ng/masterelement/lazyload/childElemHelper_t.cpp \
    libebml_ng/masterelement/lazyload/locks.cpp \
    libebml_ng/masterelement/lazyload/prepared_insert_t.cpp \
    libebml_ng/masterelement/lazyload/prepared_multiinsert_t.cpp \
    libebml_ng/masterelement/lazyload/prepared_remove_t.cpp \
    libebml_ng/masterelement/lazyload/prepared_resize_t.cpp \
    libebml_ng/masterelement/lazyload/extent_t.cpp \
    libebml_ng/vint.cpp \
    libebml_ng/parsing/io.cpp \
    libebml_ng/parsing/string.cpp \
    libebml_ng/struct/ll.cpp \
    libebml_ng/struct/ull.cpp \
    libebml_ng/struct/double.cpp \
    libebml_ng/struct/binary.cpp \
    libebml_ng/struct/unicode.cpp \
    libebml_ng/struct/datetime.cpp \
    libebml_ng/ebmlDataElement.cpp \
    libebml_ng/basictypes.cpp \
    libebml_ng/ebmlHead.cpp \
    libebml_ng/seekdata.cpp


# Build files
BUILDDIR = build
OBJFILES = $(patsubst %.cpp,%.o,$(SRCFILES))

LIBFILE = $(BUILDDIR)/$(LIBNAME).so

HEADERFILE = $(INCDIR)/$(LIBNAME).h
HEADERDIR = $(INCDIR)/$(LIBNAME)

# Top-level target to build the library
all: $(LIBFILE)

# Rule to build an object file
$(BUILDDIR)/%.o: $(SRCDIR)/%.cpp
	mkdir -p $(@D)
	$(CXX) $(CXXFLAGS) -c $< -o $@

# Rule to build the library
$(LIBFILE): $(addprefix $(BUILDDIR)/,$(OBJFILES))
	$(CXX) $(LDFLAGS) -o $@ $^

# Install rule
install: $(LIBFILE)
	install -d $(DESTDIR)$(PREFIX)/lib
	install -m 755 $(LIBFILE) $(DESTDIR)$(PREFIX)/lib
	install -m 644 $(HEADERFILE) $(DESTDIR)$(PREFIX)/include
	install -d $(DESTDIR)$(PREFIX)/include/$(LIBNAME)
	cp -ru --no-target-directory $(HEADERDIR) $(DESTDIR)$(PREFIX)/include/$(LIBNAME)

# Clean rule
clean:
	rm -Rf $(BUILDDIR)/$(LIBNAME) $(BUILDDIR)/$(LIBNAME).o $(BUILDDIR)/$(LIBNAME).so

docs:
	doxygen -d Preprocessor Doxyfile
