#ifndef EBML_NG_REPR_CPP
#define EBML_NG_REPR_CPP
#include "libebml_ng/repr.h"
#include "cxxabi.h"
#include <iostream>
#include <unordered_map>
#include <map>

namespace ebml {
    static const std::unordered_map<char, std::wstring> special = {{0x27, L"\\'"}, {0x09, L"\\t"}, {0x10, L"\\n"}, {0x13, L"\\r"}, {0x92, L"\\\\"}};

    bool in_multrange(const std::map<char16_t, char16_t>& d, char16_t c) {
        auto iter = d.upper_bound(c);

        if (iter == d.cbegin()) {
            return false;
        }

        --iter;

        char16_t upper = iter->second;
        return d.key_comp()(c, upper);
    }

    static const std::map<char16_t, char16_t> x_ranges = {
        {0x00, 0x20},
        {0x7f, 0x0100}
    };

    std::wstring repr(const std::string& str) {
        std::wstringstream ss;
        ss << L"b'";

        for (const auto& c : str) {
            auto c2 = static_cast<unsigned char>(c);
            if (special.count(c2)) {
                ss << special.at(c2);
            } else if (in_multrange(x_ranges, c2)) {
                ss << L"\\x" << std::hex << std::setw(2) << std::setfill(L'0') << c2;
            } else {
                ss << c;
            }
        }

        ss << L"'";
        return ss.str();
    }

    static const std::unordered_map<wchar_t, std::wstring> special_unicode = {{0x27, L"\\'"}, {0x09, L"\\t"}, {0x10, L"\\n"}, {0x13, L"\\r"}, {0x92, L"\\\\"}};

    static const std::map<wchar_t, wchar_t> x_ranges_unicode = {
        {0x00, 0x20},
        {0x7f, 0xa1},
        {0xad, 0xae}
    };

    static const std::map<wchar_t, wchar_t> u_ranges = {
        {0x0378, 0x037a},
        {0x0380, 0x0384},
        {0x038b, 0x038c},
        {0x038d, 0x038e},
        {0x03a2, 0x03a3},
        {0x0530, 0x0531},
        {0x0557, 0x0559},
        {0x0560, 0x0561},
        {0x0588, 0x0589},
        {0x058b, 0x058d},
        {0x0590, 0x0591},
        {0x05c8, 0x05d0},
        {0x05eb, 0x05f0},
        {0x05f5, 0x0606},
        {0x061c, 0x061e},
        {0x06dd, 0x06de},
        {0x070e, 0x0710},
        {0x074b, 0x074d},
        {0x07b2, 0x07c0},
        {0x07fb, 0x0800},
        {0x082e, 0x0830},
        {0x083f, 0x0840},
        {0x085c, 0x085e},
        {0x085f, 0x08a0},
        {0x08b5, 0x08b6},
        {0x08be, 0x08d4},
        {0x08e2, 0x08e3},
        {0x0984, 0x0985},
        {0x098d, 0x098f},
        {0x0991, 0x0993},
        {0x09a9, 0x09aa},
        {0x09b1, 0x09b2},
        {0x09b3, 0x09b6},
        {0x09ba, 0x09bc},
        {0x09c5, 0x09c7},
        {0x09c9, 0x09cb},
        {0x09cf, 0x09d7},
        {0x09d8, 0x09dc},
        {0x09de, 0x09df},
        {0x09e4, 0x09e6},
        {0x09fc, 0x0a01},
        {0x0a04, 0x0a05},
        {0x0a0b, 0x0a0f},
        {0x0a11, 0x0a13},
        {0x0a29, 0x0a2a},
        {0x0a31, 0x0a32},
        {0x0a34, 0x0a35},
        {0x0a37, 0x0a38},
        {0x0a3a, 0x0a3c},
        {0x0a3d, 0x0a3e},
        {0x0a43, 0x0a47},
        {0x0a49, 0x0a4b},
        {0x0a4e, 0x0a51},
        {0x0a52, 0x0a59},
        {0x0a5d, 0x0a5e},
        {0x0a5f, 0x0a66},
        {0x0a76, 0x0a81},
        {0x0a84, 0x0a85},
        {0x0a8e, 0x0a8f},
        {0x0a92, 0x0a93},
        {0x0aa9, 0x0aaa},
        {0x0ab1, 0x0ab2},
        {0x0ab4, 0x0ab5},
        {0x0aba, 0x0abc},
        {0x0ac6, 0x0ac7},
        {0x0aca, 0x0acb},
        {0x0ace, 0x0ad0},
        {0x0ad1, 0x0ae0},
        {0x0ae4, 0x0ae6},
        {0x0af2, 0x0af9},
        {0x0afa, 0x0b01},
        {0x0b04, 0x0b05},
        {0x0b0d, 0x0b0f},
        {0x0b11, 0x0b13},
        {0x0b29, 0x0b2a},
        {0x0b31, 0x0b32},
        {0x0b34, 0x0b35},
        {0x0b3a, 0x0b3c},
        {0x0b45, 0x0b47},
        {0x0b49, 0x0b4b},
        {0x0b4e, 0x0b56},
        {0x0b58, 0x0b5c},
        {0x0b5e, 0x0b5f},
        {0x0b64, 0x0b66},
        {0x0b78, 0x0b82},
        {0x0b84, 0x0b85},
        {0x0b8b, 0x0b8e},
        {0x0b91, 0x0b92},
        {0x0b96, 0x0b99},
        {0x0b9b, 0x0b9c},
        {0x0b9d, 0x0b9e},
        {0x0ba0, 0x0ba3},
        {0x0ba5, 0x0ba8},
        {0x0bab, 0x0bae},
        {0x0bba, 0x0bbe},
        {0x0bc3, 0x0bc6},
        {0x0bc9, 0x0bca},
        {0x0bce, 0x0bd0},
        {0x0bd1, 0x0bd7},
        {0x0bd8, 0x0be6},
        {0x0bfb, 0x0c00},
        {0x0c04, 0x0c05},
        {0x0c0d, 0x0c0e},
        {0x0c11, 0x0c12},
        {0x0c29, 0x0c2a},
        {0x0c3a, 0x0c3d},
        {0x0c45, 0x0c46},
        {0x0c49, 0x0c4a},
        {0x0c4e, 0x0c55},
        {0x0c57, 0x0c58},
        {0x0c5b, 0x0c60},
        {0x0c64, 0x0c66},
        {0x0c70, 0x0c78},
        {0x0c84, 0x0c85},
        {0x0c8d, 0x0c8e},
        {0x0c91, 0x0c92},
        {0x0ca9, 0x0caa},
        {0x0cb4, 0x0cb5},
        {0x0cba, 0x0cbc},
        {0x0cc5, 0x0cc6},
        {0x0cc9, 0x0cca},
        {0x0cce, 0x0cd5},
        {0x0cd7, 0x0cde},
        {0x0cdf, 0x0ce0},
        {0x0ce4, 0x0ce6},
        {0x0cf0, 0x0cf1},
        {0x0cf3, 0x0d01},
        {0x0d04, 0x0d05},
        {0x0d0d, 0x0d0e},
        {0x0d11, 0x0d12},
        {0x0d3b, 0x0d3d},
        {0x0d45, 0x0d46},
        {0x0d49, 0x0d4a},
        {0x0d50, 0x0d54},
        {0x0d64, 0x0d66},
        {0x0d80, 0x0d82},
        {0x0d84, 0x0d85},
        {0x0d97, 0x0d9a},
        {0x0db2, 0x0db3},
        {0x0dbc, 0x0dbd},
        {0x0dbe, 0x0dc0},
        {0x0dc7, 0x0dca},
        {0x0dcb, 0x0dcf},
        {0x0dd5, 0x0dd6},
        {0x0dd7, 0x0dd8},
        {0x0de0, 0x0de6},
        {0x0df0, 0x0df2},
        {0x0df5, 0x0e01},
        {0x0e3b, 0x0e3f},
        {0x0e5c, 0x0e81},
        {0x0e83, 0x0e84},
        {0x0e85, 0x0e87},
        {0x0e89, 0x0e8a},
        {0x0e8b, 0x0e8d},
        {0x0e8e, 0x0e94},
        {0x0e98, 0x0e99},
        {0x0ea0, 0x0ea1},
        {0x0ea4, 0x0ea5},
        {0x0ea6, 0x0ea7},
        {0x0ea8, 0x0eaa},
        {0x0eac, 0x0ead},
        {0x0eba, 0x0ebb},
        {0x0ebe, 0x0ec0},
        {0x0ec5, 0x0ec6},
        {0x0ec7, 0x0ec8},
        {0x0ece, 0x0ed0},
        {0x0eda, 0x0edc},
        {0x0ee0, 0x0f00},
        {0x0f48, 0x0f49},
        {0x0f6d, 0x0f71},
        {0x0f98, 0x0f99},
        {0x0fbd, 0x0fbe},
        {0x0fcd, 0x0fce},
        {0x0fdb, 0x1000},
        {0x10c6, 0x10c7},
        {0x10c8, 0x10cd},
        {0x10ce, 0x10d0},
        {0x1249, 0x124a},
        {0x124e, 0x1250},
        {0x1257, 0x1258},
        {0x1259, 0x125a},
        {0x125e, 0x1260},
        {0x1289, 0x128a},
        {0x128e, 0x1290},
        {0x12b1, 0x12b2},
        {0x12b6, 0x12b8},
        {0x12bf, 0x12c0},
        {0x12c1, 0x12c2},
        {0x12c6, 0x12c8},
        {0x12d7, 0x12d8},
        {0x1311, 0x1312},
        {0x1316, 0x1318},
        {0x135b, 0x135d},
        {0x137d, 0x1380},
        {0x139a, 0x13a0},
        {0x13f6, 0x13f8},
        {0x13fe, 0x1400},
        {0x1680, 0x1681},
        {0x169d, 0x16a0},
        {0x16f9, 0x1700},
        {0x170d, 0x170e},
        {0x1715, 0x1720},
        {0x1737, 0x1740},
        {0x1754, 0x1760},
        {0x176d, 0x176e},
        {0x1771, 0x1772},
        {0x1774, 0x1780},
        {0x17de, 0x17e0},
        {0x17ea, 0x17f0},
        {0x17fa, 0x1800},
        {0x180e, 0x1810},
        {0x181a, 0x1820},
        {0x1878, 0x1880},
        {0x18ab, 0x18b0},
        {0x18f6, 0x1900},
        {0x191f, 0x1920},
        {0x192c, 0x1930},
        {0x193c, 0x1940},
        {0x1941, 0x1944},
        {0x196e, 0x1970},
        {0x1975, 0x1980},
        {0x19ac, 0x19b0},
        {0x19ca, 0x19d0},
        {0x19db, 0x19de},
        {0x1a1c, 0x1a1e},
        {0x1a5f, 0x1a60},
        {0x1a7d, 0x1a7f},
        {0x1a8a, 0x1a90},
        {0x1a9a, 0x1aa0},
        {0x1aae, 0x1ab0},
        {0x1abf, 0x1b00},
        {0x1b4c, 0x1b50},
        {0x1b7d, 0x1b80},
        {0x1bf4, 0x1bfc},
        {0x1c38, 0x1c3b},
        {0x1c4a, 0x1c4d},
        {0x1c89, 0x1cc0},
        {0x1cc8, 0x1cd0},
        {0x1cf7, 0x1cf8},
        {0x1cfa, 0x1d00},
        {0x1df6, 0x1dfb},
        {0x1f16, 0x1f18},
        {0x1f1e, 0x1f20},
        {0x1f46, 0x1f48},
        {0x1f4e, 0x1f50},
        {0x1f58, 0x1f59},
        {0x1f5a, 0x1f5b},
        {0x1f5c, 0x1f5d},
        {0x1f5e, 0x1f5f},
        {0x1f7e, 0x1f80},
        {0x1fb5, 0x1fb6},
        {0x1fc5, 0x1fc6},
        {0x1fd4, 0x1fd6},
        {0x1fdc, 0x1fdd},
        {0x1ff0, 0x1ff2},
        {0x1ff5, 0x1ff6},
        {0x1fff, 0x2010},
        {0x2028, 0x2030},
        {0x205f, 0x2070},
        {0x2072, 0x2074},
        {0x208f, 0x2090},
        {0x209d, 0x20a0},
        {0x20bf, 0x20d0},
        {0x20f1, 0x2100},
        {0x218c, 0x2190},
        {0x23ff, 0x2400},
        {0x2427, 0x2440},
        {0x244b, 0x2460},
        {0x2b74, 0x2b76},
        {0x2b96, 0x2b98},
        {0x2bba, 0x2bbd},
        {0x2bc9, 0x2bca},
        {0x2bd2, 0x2bec},
        {0x2bf0, 0x2c00},
        {0x2c2f, 0x2c30},
        {0x2c5f, 0x2c60},
        {0x2cf4, 0x2cf9},
        {0x2d26, 0x2d27},
        {0x2d28, 0x2d2d},
        {0x2d2e, 0x2d30},
        {0x2d68, 0x2d6f},
        {0x2d71, 0x2d7f},
        {0x2d97, 0x2da0},
        {0x2da7, 0x2da8},
        {0x2daf, 0x2db0},
        {0x2db7, 0x2db8},
        {0x2dbf, 0x2dc0},
        {0x2dc7, 0x2dc8},
        {0x2dcf, 0x2dd0},
        {0x2dd7, 0x2dd8},
        {0x2ddf, 0x2de0},
        {0x2e45, 0x2e80},
        {0x2e9a, 0x2e9b},
        {0x2ef4, 0x2f00},
        {0x2fd6, 0x2ff0},
        {0x2ffc, 0x3001},
        {0x3040, 0x3041},
        {0x3097, 0x3099},
        {0x3100, 0x3105},
        {0x312e, 0x3131},
        {0x318f, 0x3190},
        {0x31bb, 0x31c0},
        {0x31e4, 0x31f0},
        {0x321f, 0x3220},
        {0x32ff, 0x3300},
        {0x4db6, 0x4dc0},
        {0x9fd6, 0xa000},
        {0xa48d, 0xa490},
        {0xa4c7, 0xa4d0},
        {0xa62c, 0xa640},
        {0xa6f8, 0xa700},
        {0xa7af, 0xa7b0},
        {0xa7b8, 0xa7f7},
        {0xa82c, 0xa830},
        {0xa83a, 0xa840},
        {0xa878, 0xa880},
        {0xa8c6, 0xa8ce},
        {0xa8da, 0xa8e0},
        {0xa8fe, 0xa900},
        {0xa954, 0xa95f},
        {0xa97d, 0xa980},
        {0xa9ce, 0xa9cf},
        {0xa9da, 0xa9de},
        {0xa9ff, 0xaa00},
        {0xaa37, 0xaa40},
        {0xaa4e, 0xaa50},
        {0xaa5a, 0xaa5c},
        {0xaac3, 0xaadb},
        {0xaaf7, 0xab01},
        {0xab07, 0xab09},
        {0xab0f, 0xab11},
        {0xab17, 0xab20},
        {0xab27, 0xab28},
        {0xab2f, 0xab30},
        {0xab66, 0xab70},
        {0xabee, 0xabf0},
        {0xabfa, 0xac00},
        {0xd7a4, 0xd7b0},
        {0xd7c7, 0xd7cb},
        {0xd7fc, 0xf900},
        {0xfa6e, 0xfa70},
        {0xfada, 0xfb00},
        {0xfb07, 0xfb13},
        {0xfb18, 0xfb1d},
        {0xfb37, 0xfb38},
        {0xfb3d, 0xfb3e},
        {0xfb3f, 0xfb40},
        {0xfb42, 0xfb43},
        {0xfb45, 0xfb46},
        {0xfbc2, 0xfbd3},
        {0xfd40, 0xfd50},
        {0xfd90, 0xfd92},
        {0xfdc8, 0xfdf0},
        {0xfdfe, 0xfe00},
        {0xfe1a, 0xfe20},
        {0xfe53, 0xfe54},
        {0xfe67, 0xfe68},
        {0xfe6c, 0xfe70},
        {0xfe75, 0xfe76},
        {0xfefd, 0xff01},
        {0xffbf, 0xffc2},
        {0xffc8, 0xffca},
        {0xffd0, 0xffd2},
        {0xffd8, 0xffda},
        {0xffdd, 0xffe0},
        {0xffe7, 0xffe8},
        {0xffef, 0xfffc},
        {0xfffe, 0x010000}
    };

    static const std::map<wchar_t, wchar_t> U_ranges = {
        {0x01000c, 0x01000d},
        {0x010027, 0x010028},
        {0x01003b, 0x01003c},
        {0x01003e, 0x01003f},
        {0x01004e, 0x010050},
        {0x01005e, 0x010080},
        {0x0100fb, 0x010100},
        {0x010103, 0x010107},
        {0x010134, 0x010137},
        {0x01018f, 0x010190},
        {0x01019c, 0x0101a0},
        {0x0101a1, 0x0101d0},
        {0x0101fe, 0x010280},
        {0x01029d, 0x0102a0},
        {0x0102d1, 0x0102e0},
        {0x0102fc, 0x010300},
        {0x010324, 0x010330},
        {0x01034b, 0x010350},
        {0x01037b, 0x010380},
        {0x01039e, 0x01039f},
        {0x0103c4, 0x0103c8},
        {0x0103d6, 0x010400},
        {0x01049e, 0x0104a0},
        {0x0104aa, 0x0104b0},
        {0x0104d4, 0x0104d8},
        {0x0104fc, 0x010500},
        {0x010528, 0x010530},
        {0x010564, 0x01056f},
        {0x010570, 0x010600},
        {0x010737, 0x010740},
        {0x010756, 0x010760},
        {0x010768, 0x010800},
        {0x010806, 0x010808},
        {0x010809, 0x01080a},
        {0x010836, 0x010837},
        {0x010839, 0x01083c},
        {0x01083d, 0x01083f},
        {0x010856, 0x010857},
        {0x01089f, 0x0108a7},
        {0x0108b0, 0x0108e0},
        {0x0108f3, 0x0108f4},
        {0x0108f6, 0x0108fb},
        {0x01091c, 0x01091f},
        {0x01093a, 0x01093f},
        {0x010940, 0x010980},
        {0x0109b8, 0x0109bc},
        {0x0109d0, 0x0109d2},
        {0x010a04, 0x010a05},
        {0x010a07, 0x010a0c},
        {0x010a14, 0x010a15},
        {0x010a18, 0x010a19},
        {0x010a34, 0x010a38},
        {0x010a3b, 0x010a3f},
        {0x010a48, 0x010a50},
        {0x010a59, 0x010a60},
        {0x010aa0, 0x010ac0},
        {0x010ae7, 0x010aeb},
        {0x010af7, 0x010b00},
        {0x010b36, 0x010b39},
        {0x010b56, 0x010b58},
        {0x010b73, 0x010b78},
        {0x010b92, 0x010b99},
        {0x010b9d, 0x010ba9},
        {0x010bb0, 0x010c00},
        {0x010c49, 0x010c80},
        {0x010cb3, 0x010cc0},
        {0x010cf3, 0x010cfa},
        {0x010d00, 0x010e60},
        {0x010e7f, 0x011000},
        {0x01104e, 0x011052},
        {0x011070, 0x01107f},
        {0x0110bd, 0x0110be},
        {0x0110c2, 0x0110d0},
        {0x0110e9, 0x0110f0},
        {0x0110fa, 0x011100},
        {0x011135, 0x011136},
        {0x011144, 0x011150},
        {0x011177, 0x011180},
        {0x0111ce, 0x0111d0},
        {0x0111e0, 0x0111e1},
        {0x0111f5, 0x011200},
        {0x011212, 0x011213},
        {0x01123f, 0x011280},
        {0x011287, 0x011288},
        {0x011289, 0x01128a},
        {0x01128e, 0x01128f},
        {0x01129e, 0x01129f},
        {0x0112aa, 0x0112b0},
        {0x0112eb, 0x0112f0},
        {0x0112fa, 0x011300},
        {0x011304, 0x011305},
        {0x01130d, 0x01130f},
        {0x011311, 0x011313},
        {0x011329, 0x01132a},
        {0x011331, 0x011332},
        {0x011334, 0x011335},
        {0x01133a, 0x01133c},
        {0x011345, 0x011347},
        {0x011349, 0x01134b},
        {0x01134e, 0x011350},
        {0x011351, 0x011357},
        {0x011358, 0x01135d},
        {0x011364, 0x011366},
        {0x01136d, 0x011370},
        {0x011375, 0x011400},
        {0x01145a, 0x01145b},
        {0x01145c, 0x01145d},
        {0x01145e, 0x011480},
        {0x0114c8, 0x0114d0},
        {0x0114da, 0x011580},
        {0x0115b6, 0x0115b8},
        {0x0115de, 0x011600},
        {0x011645, 0x011650},
        {0x01165a, 0x011660},
        {0x01166d, 0x011680},
        {0x0116b8, 0x0116c0},
        {0x0116ca, 0x011700},
        {0x01171a, 0x01171d},
        {0x01172c, 0x011730},
        {0x011740, 0x0118a0},
        {0x0118f3, 0x0118ff},
        {0x011900, 0x011ac0},
        {0x011af9, 0x011c00},
        {0x011c09, 0x011c0a},
        {0x011c37, 0x011c38},
        {0x011c46, 0x011c50},
        {0x011c6d, 0x011c70},
        {0x011c90, 0x011c92},
        {0x011ca8, 0x011ca9},
        {0x011cb7, 0x012000},
        {0x01239a, 0x012400},
        {0x01246f, 0x012470},
        {0x012475, 0x012480},
        {0x012544, 0x013000},
        {0x01342f, 0x014400},
        {0x014647, 0x016800},
        {0x016a39, 0x016a40},
        {0x016a5f, 0x016a60},
        {0x016a6a, 0x016a6e},
        {0x016a70, 0x016ad0},
        {0x016aee, 0x016af0},
        {0x016af6, 0x016b00},
        {0x016b46, 0x016b50},
        {0x016b5a, 0x016b5b},
        {0x016b62, 0x016b63},
        {0x016b78, 0x016b7d},
        {0x016b90, 0x016f00},
        {0x016f45, 0x016f50},
        {0x016f7f, 0x016f8f},
        {0x016fa0, 0x016fe0},
        {0x016fe1, 0x017000},
        {0x0187ed, 0x018800},
        {0x018af3, 0x01b000},
        {0x01b002, 0x01bc00},
        {0x01bc6b, 0x01bc70},
        {0x01bc7d, 0x01bc80},
        {0x01bc89, 0x01bc90},
        {0x01bc9a, 0x01bc9c},
        {0x01bca0, 0x01d000},
        {0x01d0f6, 0x01d100},
        {0x01d127, 0x01d129},
        {0x01d173, 0x01d17b},
        {0x01d1e9, 0x01d200},
        {0x01d246, 0x01d300},
        {0x01d357, 0x01d360},
        {0x01d372, 0x01d400},
        {0x01d455, 0x01d456},
        {0x01d49d, 0x01d49e},
        {0x01d4a0, 0x01d4a2},
        {0x01d4a3, 0x01d4a5},
        {0x01d4a7, 0x01d4a9},
        {0x01d4ad, 0x01d4ae},
        {0x01d4ba, 0x01d4bb},
        {0x01d4bc, 0x01d4bd},
        {0x01d4c4, 0x01d4c5},
        {0x01d506, 0x01d507},
        {0x01d50b, 0x01d50d},
        {0x01d515, 0x01d516},
        {0x01d51d, 0x01d51e},
        {0x01d53a, 0x01d53b},
        {0x01d53f, 0x01d540},
        {0x01d545, 0x01d546},
        {0x01d547, 0x01d54a},
        {0x01d551, 0x01d552},
        {0x01d6a6, 0x01d6a8},
        {0x01d7cc, 0x01d7ce},
        {0x01da8c, 0x01da9b},
        {0x01daa0, 0x01daa1},
        {0x01dab0, 0x01e000},
        {0x01e007, 0x01e008},
        {0x01e019, 0x01e01b},
        {0x01e022, 0x01e023},
        {0x01e025, 0x01e026},
        {0x01e02b, 0x01e800},
        {0x01e8c5, 0x01e8c7},
        {0x01e8d7, 0x01e900},
        {0x01e94b, 0x01e950},
        {0x01e95a, 0x01e95e},
        {0x01e960, 0x01ee00},
        {0x01ee04, 0x01ee05},
        {0x01ee20, 0x01ee21},
        {0x01ee23, 0x01ee24},
        {0x01ee25, 0x01ee27},
        {0x01ee28, 0x01ee29},
        {0x01ee33, 0x01ee34},
        {0x01ee38, 0x01ee39},
        {0x01ee3a, 0x01ee3b},
        {0x01ee3c, 0x01ee42},
        {0x01ee43, 0x01ee47},
        {0x01ee48, 0x01ee49},
        {0x01ee4a, 0x01ee4b},
        {0x01ee4c, 0x01ee4d},
        {0x01ee50, 0x01ee51},
        {0x01ee53, 0x01ee54},
        {0x01ee55, 0x01ee57},
        {0x01ee58, 0x01ee59},
        {0x01ee5a, 0x01ee5b},
        {0x01ee5c, 0x01ee5d},
        {0x01ee5e, 0x01ee5f},
        {0x01ee60, 0x01ee61},
        {0x01ee63, 0x01ee64},
        {0x01ee65, 0x01ee67},
        {0x01ee6b, 0x01ee6c},
        {0x01ee73, 0x01ee74},
        {0x01ee78, 0x01ee79},
        {0x01ee7d, 0x01ee7e},
        {0x01ee7f, 0x01ee80},
        {0x01ee8a, 0x01ee8b},
        {0x01ee9c, 0x01eea1},
        {0x01eea4, 0x01eea5},
        {0x01eeaa, 0x01eeab},
        {0x01eebc, 0x01eef0},
        {0x01eef2, 0x01f000},
        {0x01f02c, 0x01f030},
        {0x01f094, 0x01f0a0},
        {0x01f0af, 0x01f0b1},
        {0x01f0c0, 0x01f0c1},
        {0x01f0d0, 0x01f0d1},
        {0x01f0f6, 0x01f100},
        {0x01f10d, 0x01f110},
        {0x01f12f, 0x01f130},
        {0x01f16c, 0x01f170},
        {0x01f1ad, 0x01f1e6},
        {0x01f203, 0x01f210},
        {0x01f23c, 0x01f240},
        {0x01f249, 0x01f250},
        {0x01f252, 0x01f300},
        {0x01f6d3, 0x01f6e0},
        {0x01f6ed, 0x01f6f0},
        {0x01f6f7, 0x01f700},
        {0x01f774, 0x01f780},
        {0x01f7d5, 0x01f800},
        {0x01f80c, 0x01f810},
        {0x01f848, 0x01f850},
        {0x01f85a, 0x01f860},
        {0x01f888, 0x01f890},
        {0x01f8ae, 0x01f910},
        {0x01f91f, 0x01f920},
        {0x01f928, 0x01f930},
        {0x01f931, 0x01f933},
        {0x01f93f, 0x01f940},
        {0x01f94c, 0x01f950},
        {0x01f95f, 0x01f980},
        {0x01f992, 0x01f9c0},
        {0x01f9c1, 0x020000},
        {0x02a6d7, 0x02a700},
        {0x02b735, 0x02b740},
        {0x02b81e, 0x02b820},
        {0x02cea2, 0x02f800},
        {0x02fa1e, 0x0e0100},
        {0x0e01f0, 0x110000}
    };

    bool in_multrange(const std::map<wchar_t, wchar_t>& d, wchar_t c) {
        auto iter = d.upper_bound(c);

        if (iter == d.cbegin()) {
            return false;
        }

        --iter;

        wchar_t upper = iter->second;
        return d.key_comp()(c, upper);
    }

    std::wstring repr(const std::wstring& str) {
        std::wstringstream ss;
        ss << L"'";

        for (const auto& c : str) {
            if (special_unicode.count(c)) {
                ss << special_unicode.at(c);
            } else if (in_multrange(x_ranges_unicode, c)) {
                ss << L"\\x" << std::hex << std::setw(2) << std::setfill(L'0') << static_cast<unsigned char>(c);
            } else if (in_multrange(u_ranges, c)) {
                ss << L"\\u" << std::hex << std::setw(4) << std::setfill(L'0') << static_cast<uint16_t>(c);
            } else if (in_multrange(U_ranges, c)) {
                ss << L"\\U" << std::hex << std::setw(8) << std::setfill(L'0') << static_cast<uint32_t>(c);
            } else {
                ss << c;
            }
        }

        ss << "'";
        return ss.str();
    }

    std::wstring repr(unsigned long long n) {
        return std::to_wstring(n);
    }

    std::wstring repr(unsigned long n) {
        return std::to_wstring(n);
    }

    std::wstring repr(long long z) {
        return std::to_wstring(z);
    }

    std::wstring repr(long z) {
        return std::to_wstring(z);
    }

    std::wstring repr(double x) {
        char digits[32];
        auto size = sprintf(digits, "%.17g", x);
        return unpack<std::wstring>(std::string(digits, size));
    }
}
#endif
